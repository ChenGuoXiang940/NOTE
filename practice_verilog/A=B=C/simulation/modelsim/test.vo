// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "03/05/2025 10:24:41"

// 
// Device: Altera EP4CGX15BF14A7 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module test (
	A,
	B,
	C,
	F);
input 	[2:0] A;
input 	[2:0] B;
input 	[2:0] C;
output 	F;

// Design Ports Information
// F	=>  Location: PIN_M6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A[1]	=>  Location: PIN_L7,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B[1]	=>  Location: PIN_K9,	 I/O Standard: 2.5 V,	 Current Strength: Default
// C[1]	=>  Location: PIN_N9,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A[0]	=>  Location: PIN_K8,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B[0]	=>  Location: PIN_N6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// C[0]	=>  Location: PIN_L4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A[2]	=>  Location: PIN_L5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B[2]	=>  Location: PIN_C6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// C[2]	=>  Location: PIN_N8,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \C[0]~input_o ;
wire \F~output_o ;
wire \B[2]~input_o ;
wire \B[0]~input_o ;
wire \A[0]~input_o ;
wire \C[1]~input_o ;
wire \A[1]~input_o ;
wire \B[1]~input_o ;
wire \F~0_combout ;
wire \F~1_combout ;
wire \A[2]~input_o ;
wire \C[2]~input_o ;
wire \F~2_combout ;


// Location: IOIBUF_X8_Y0_N8
cycloneiv_io_ibuf \C[0]~input (
	.i(C[0]),
	.ibar(gnd),
	.o(\C[0]~input_o ));
// synopsys translate_off
defparam \C[0]~input .bus_hold = "false";
defparam \C[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOOBUF_X12_Y0_N9
cycloneiv_io_obuf \F~output (
	.i(!\F~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\F~output_o ),
	.obar());
// synopsys translate_off
defparam \F~output .bus_hold = "false";
defparam \F~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X14_Y31_N1
cycloneiv_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X12_Y0_N1
cycloneiv_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X22_Y0_N8
cycloneiv_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X20_Y0_N1
cycloneiv_io_ibuf \C[1]~input (
	.i(C[1]),
	.ibar(gnd),
	.o(\C[1]~input_o ));
// synopsys translate_off
defparam \C[1]~input .bus_hold = "false";
defparam \C[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X14_Y0_N1
cycloneiv_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X22_Y0_N1
cycloneiv_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N0
cycloneiv_lcell_comb \F~0 (
// Equation(s):
// \F~0_combout  = (\C[1]~input_o  & ((!\B[1]~input_o ) # (!\A[1]~input_o ))) # (!\C[1]~input_o  & ((\A[1]~input_o ) # (\B[1]~input_o )))

	.dataa(gnd),
	.datab(\C[1]~input_o ),
	.datac(\A[1]~input_o ),
	.datad(\B[1]~input_o ),
	.cin(gnd),
	.combout(\F~0_combout ),
	.cout());
// synopsys translate_off
defparam \F~0 .lut_mask = 16'h3FFC;
defparam \F~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N2
cycloneiv_lcell_comb \F~1 (
// Equation(s):
// \F~1_combout  = (\F~0_combout ) # ((\C[0]~input_o  & ((!\A[0]~input_o ) # (!\B[0]~input_o ))) # (!\C[0]~input_o  & ((\B[0]~input_o ) # (\A[0]~input_o ))))

	.dataa(\C[0]~input_o ),
	.datab(\B[0]~input_o ),
	.datac(\A[0]~input_o ),
	.datad(\F~0_combout ),
	.cin(gnd),
	.combout(\F~1_combout ),
	.cout());
// synopsys translate_off
defparam \F~1 .lut_mask = 16'hFF7E;
defparam \F~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: IOIBUF_X14_Y0_N8
cycloneiv_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X20_Y0_N8
cycloneiv_io_ibuf \C[2]~input (
	.i(C[2]),
	.ibar(gnd),
	.o(\C[2]~input_o ));
// synopsys translate_off
defparam \C[2]~input .bus_hold = "false";
defparam \C[2]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X14_Y1_N4
cycloneiv_lcell_comb \F~2 (
// Equation(s):
// \F~2_combout  = (\F~1_combout ) # ((\B[2]~input_o  & ((!\C[2]~input_o ) # (!\A[2]~input_o ))) # (!\B[2]~input_o  & ((\A[2]~input_o ) # (\C[2]~input_o ))))

	.dataa(\B[2]~input_o ),
	.datab(\F~1_combout ),
	.datac(\A[2]~input_o ),
	.datad(\C[2]~input_o ),
	.cin(gnd),
	.combout(\F~2_combout ),
	.cout());
// synopsys translate_off
defparam \F~2 .lut_mask = 16'hDFFE;
defparam \F~2 .sum_lutc_input = "datac";
// synopsys translate_on

assign F = \F~output_o ;

endmodule
