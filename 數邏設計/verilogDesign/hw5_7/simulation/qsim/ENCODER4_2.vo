// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "03/24/2025 15:04:32"

// 
// Device: Altera EP4CGX15BF14A7 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module ENCODER4_2 (
	I,
	A,
	B);
input 	[3:0] I;
output 	A;
output 	B;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \A~output_o ;
wire \B~output_o ;
wire \I[1]~input_o ;
wire \I[0]~input_o ;
wire \I[2]~input_o ;
wire \I[3]~input_o ;
wire \A~1_combout ;
wire \A~2_combout ;
wire \B~1_combout ;


cycloneiv_io_obuf \A~output (
	.i(\A~1_combout ),
	.oe(\A~2_combout ),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\A~output_o ),
	.obar());
// synopsys translate_off
defparam \A~output .bus_hold = "false";
defparam \A~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \B~output (
	.i(\B~1_combout ),
	.oe(\A~2_combout ),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\B~output_o ),
	.obar());
// synopsys translate_off
defparam \B~output .bus_hold = "false";
defparam \B~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \I[1]~input (
	.i(I[1]),
	.ibar(gnd),
	.o(\I[1]~input_o ));
// synopsys translate_off
defparam \I[1]~input .bus_hold = "false";
defparam \I[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \I[0]~input (
	.i(I[0]),
	.ibar(gnd),
	.o(\I[0]~input_o ));
// synopsys translate_off
defparam \I[0]~input .bus_hold = "false";
defparam \I[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \I[2]~input (
	.i(I[2]),
	.ibar(gnd),
	.o(\I[2]~input_o ));
// synopsys translate_off
defparam \I[2]~input .bus_hold = "false";
defparam \I[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \I[3]~input (
	.i(I[3]),
	.ibar(gnd),
	.o(\I[3]~input_o ));
// synopsys translate_off
defparam \I[3]~input .bus_hold = "false";
defparam \I[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \A~1 (
// Equation(s):
// \A~1_combout  = (\I[2]~input_o ) # ((\I[3]~input_o ) # (\I[1]~input_o  $ (!\I[0]~input_o )))

	.dataa(\I[1]~input_o ),
	.datab(\I[0]~input_o ),
	.datac(\I[2]~input_o ),
	.datad(\I[3]~input_o ),
	.cin(gnd),
	.combout(\A~1_combout ),
	.cout());
// synopsys translate_off
defparam \A~1 .lut_mask = 16'hFFF9;
defparam \A~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \A~2 (
// Equation(s):
// \A~2_combout  = (\I[1]~input_o  & (!\I[2]~input_o  & (!\I[0]~input_o  & !\I[3]~input_o ))) # (!\I[1]~input_o  & ((\I[2]~input_o  & (!\I[0]~input_o  & !\I[3]~input_o )) # (!\I[2]~input_o  & (\I[0]~input_o  $ (\I[3]~input_o )))))

	.dataa(\I[1]~input_o ),
	.datab(\I[2]~input_o ),
	.datac(\I[0]~input_o ),
	.datad(\I[3]~input_o ),
	.cin(gnd),
	.combout(\A~2_combout ),
	.cout());
// synopsys translate_off
defparam \A~2 .lut_mask = 16'h0116;
defparam \A~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb \B~1 (
// Equation(s):
// \B~1_combout  = (\I[1]~input_o ) # ((\I[3]~input_o ) # (\I[2]~input_o  $ (!\I[0]~input_o )))

	.dataa(\I[2]~input_o ),
	.datab(\I[0]~input_o ),
	.datac(\I[1]~input_o ),
	.datad(\I[3]~input_o ),
	.cin(gnd),
	.combout(\B~1_combout ),
	.cout());
// synopsys translate_off
defparam \B~1 .lut_mask = 16'hFFF9;
defparam \B~1 .sum_lutc_input = "datac";
// synopsys translate_on

assign A = \A~output_o ;

assign B = \B~output_o ;

endmodule
