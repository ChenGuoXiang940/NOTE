// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2025 15:10:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONCATENATION
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONCATENATION_vlg_sample_tst(
	A,
	HIGH_BYTE,
	LOW_BYTE,
	sampler_tx
);
input [7:0] A;
input [7:0] HIGH_BYTE;
input [7:0] LOW_BYTE;
output sampler_tx;

reg sample;
time current_time;
always @(A or HIGH_BYTE or LOW_BYTE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONCATENATION_vlg_check_tst (
	HIGH_NIBBLE,
	LEFT,
	LOW_BIBBLE,
	RIGHT,
	SWAP,
	WORD,
	sampler_rx
);
input [3:0] HIGH_NIBBLE;
input [7:0] LEFT;
input [3:0] LOW_BIBBLE;
input [7:0] RIGHT;
input [7:0] SWAP;
input [15:0] WORD;
input sampler_rx;

reg [3:0] HIGH_NIBBLE_expected;
reg [7:0] LEFT_expected;
reg [3:0] LOW_BIBBLE_expected;
reg [7:0] RIGHT_expected;
reg [7:0] SWAP_expected;
reg [15:0] WORD_expected;

reg [3:0] HIGH_NIBBLE_prev;
reg [7:0] LEFT_prev;
reg [3:0] LOW_BIBBLE_prev;
reg [7:0] RIGHT_prev;
reg [7:0] SWAP_prev;
reg [15:0] WORD_prev;

reg [3:0] HIGH_NIBBLE_expected_prev;
reg [7:0] LEFT_expected_prev;
reg [3:0] LOW_BIBBLE_expected_prev;
reg [7:0] RIGHT_expected_prev;
reg [7:0] SWAP_expected_prev;
reg [15:0] WORD_expected_prev;

reg [3:0] last_HIGH_NIBBLE_exp;
reg [7:0] last_LEFT_exp;
reg [3:0] last_LOW_BIBBLE_exp;
reg [7:0] last_RIGHT_exp;
reg [7:0] last_SWAP_exp;
reg [15:0] last_WORD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	HIGH_NIBBLE_prev = HIGH_NIBBLE;
	LEFT_prev = LEFT;
	LOW_BIBBLE_prev = LOW_BIBBLE;
	RIGHT_prev = RIGHT;
	SWAP_prev = SWAP;
	WORD_prev = WORD;
end

// update expected /o prevs

always @(trigger)
begin
	HIGH_NIBBLE_expected_prev = HIGH_NIBBLE_expected;
	LEFT_expected_prev = LEFT_expected;
	LOW_BIBBLE_expected_prev = LOW_BIBBLE_expected;
	RIGHT_expected_prev = RIGHT_expected;
	SWAP_expected_prev = SWAP_expected;
	WORD_expected_prev = WORD_expected;
end


// expected HIGH_NIBBLE[ 3 ]
initial
begin
	HIGH_NIBBLE_expected[3] = 1'bX;
end 
// expected HIGH_NIBBLE[ 2 ]
initial
begin
	HIGH_NIBBLE_expected[2] = 1'bX;
end 
// expected HIGH_NIBBLE[ 1 ]
initial
begin
	HIGH_NIBBLE_expected[1] = 1'bX;
end 
// expected HIGH_NIBBLE[ 0 ]
initial
begin
	HIGH_NIBBLE_expected[0] = 1'bX;
end 
// expected LEFT[ 7 ]
initial
begin
	LEFT_expected[7] = 1'bX;
end 
// expected LEFT[ 6 ]
initial
begin
	LEFT_expected[6] = 1'bX;
end 
// expected LEFT[ 5 ]
initial
begin
	LEFT_expected[5] = 1'bX;
end 
// expected LEFT[ 4 ]
initial
begin
	LEFT_expected[4] = 1'bX;
end 
// expected LEFT[ 3 ]
initial
begin
	LEFT_expected[3] = 1'bX;
end 
// expected LEFT[ 2 ]
initial
begin
	LEFT_expected[2] = 1'bX;
end 
// expected LEFT[ 1 ]
initial
begin
	LEFT_expected[1] = 1'bX;
end 
// expected LEFT[ 0 ]
initial
begin
	LEFT_expected[0] = 1'bX;
end 
// expected LOW_BIBBLE[ 3 ]
initial
begin
	LOW_BIBBLE_expected[3] = 1'bX;
end 
// expected LOW_BIBBLE[ 2 ]
initial
begin
	LOW_BIBBLE_expected[2] = 1'bX;
end 
// expected LOW_BIBBLE[ 1 ]
initial
begin
	LOW_BIBBLE_expected[1] = 1'bX;
end 
// expected LOW_BIBBLE[ 0 ]
initial
begin
	LOW_BIBBLE_expected[0] = 1'bX;
end 
// expected SWAP[ 7 ]
initial
begin
	SWAP_expected[7] = 1'bX;
end 
// expected SWAP[ 6 ]
initial
begin
	SWAP_expected[6] = 1'bX;
end 
// expected SWAP[ 5 ]
initial
begin
	SWAP_expected[5] = 1'bX;
end 
// expected SWAP[ 4 ]
initial
begin
	SWAP_expected[4] = 1'bX;
end 
// expected SWAP[ 3 ]
initial
begin
	SWAP_expected[3] = 1'bX;
end 
// expected SWAP[ 2 ]
initial
begin
	SWAP_expected[2] = 1'bX;
end 
// expected SWAP[ 1 ]
initial
begin
	SWAP_expected[1] = 1'bX;
end 
// expected SWAP[ 0 ]
initial
begin
	SWAP_expected[0] = 1'bX;
end 
// expected WORD[ 15 ]
initial
begin
	WORD_expected[15] = 1'bX;
end 
// expected WORD[ 14 ]
initial
begin
	WORD_expected[14] = 1'bX;
end 
// expected WORD[ 13 ]
initial
begin
	WORD_expected[13] = 1'bX;
end 
// expected WORD[ 12 ]
initial
begin
	WORD_expected[12] = 1'bX;
end 
// expected WORD[ 11 ]
initial
begin
	WORD_expected[11] = 1'bX;
end 
// expected WORD[ 10 ]
initial
begin
	WORD_expected[10] = 1'bX;
end 
// expected WORD[ 9 ]
initial
begin
	WORD_expected[9] = 1'bX;
end 
// expected WORD[ 8 ]
initial
begin
	WORD_expected[8] = 1'bX;
end 
// expected WORD[ 7 ]
initial
begin
	WORD_expected[7] = 1'bX;
end 
// expected WORD[ 6 ]
initial
begin
	WORD_expected[6] = 1'bX;
end 
// expected WORD[ 5 ]
initial
begin
	WORD_expected[5] = 1'bX;
end 
// expected WORD[ 4 ]
initial
begin
	WORD_expected[4] = 1'bX;
end 
// expected WORD[ 3 ]
initial
begin
	WORD_expected[3] = 1'bX;
end 
// expected WORD[ 2 ]
initial
begin
	WORD_expected[2] = 1'bX;
end 
// expected WORD[ 1 ]
initial
begin
	WORD_expected[1] = 1'bX;
end 
// expected WORD[ 0 ]
initial
begin
	WORD_expected[0] = 1'bX;
end 
// expected RIGHT[ 7 ]
initial
begin
	RIGHT_expected[7] = 1'bX;
end 
// expected RIGHT[ 6 ]
initial
begin
	RIGHT_expected[6] = 1'bX;
end 
// expected RIGHT[ 5 ]
initial
begin
	RIGHT_expected[5] = 1'bX;
end 
// expected RIGHT[ 4 ]
initial
begin
	RIGHT_expected[4] = 1'bX;
end 
// expected RIGHT[ 3 ]
initial
begin
	RIGHT_expected[3] = 1'bX;
end 
// expected RIGHT[ 2 ]
initial
begin
	RIGHT_expected[2] = 1'bX;
end 
// expected RIGHT[ 1 ]
initial
begin
	RIGHT_expected[1] = 1'bX;
end 
// expected RIGHT[ 0 ]
initial
begin
	RIGHT_expected[0] = 1'bX;
end 
// generate trigger
always @(HIGH_NIBBLE_expected or HIGH_NIBBLE or LEFT_expected or LEFT or LOW_BIBBLE_expected or LOW_BIBBLE or RIGHT_expected or RIGHT or SWAP_expected or SWAP or WORD_expected or WORD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HIGH_NIBBLE = %b | expected LEFT = %b | expected LOW_BIBBLE = %b | expected RIGHT = %b | expected SWAP = %b | expected WORD = %b | ",HIGH_NIBBLE_expected_prev,LEFT_expected_prev,LOW_BIBBLE_expected_prev,RIGHT_expected_prev,SWAP_expected_prev,WORD_expected_prev);
	$display("| real HIGH_NIBBLE = %b | real LEFT = %b | real LOW_BIBBLE = %b | real RIGHT = %b | real SWAP = %b | real WORD = %b | ",HIGH_NIBBLE_prev,LEFT_prev,LOW_BIBBLE_prev,RIGHT_prev,SWAP_prev,WORD_prev);
`endif
	if (
		( HIGH_NIBBLE_expected_prev[0] !== 1'bx ) && ( HIGH_NIBBLE_prev[0] !== HIGH_NIBBLE_expected_prev[0] )
		&& ((HIGH_NIBBLE_expected_prev[0] !== last_HIGH_NIBBLE_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HIGH_NIBBLE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HIGH_NIBBLE_expected_prev);
		$display ("     Real value = %b", HIGH_NIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HIGH_NIBBLE_exp[0] = HIGH_NIBBLE_expected_prev[0];
	end
	if (
		( HIGH_NIBBLE_expected_prev[1] !== 1'bx ) && ( HIGH_NIBBLE_prev[1] !== HIGH_NIBBLE_expected_prev[1] )
		&& ((HIGH_NIBBLE_expected_prev[1] !== last_HIGH_NIBBLE_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HIGH_NIBBLE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HIGH_NIBBLE_expected_prev);
		$display ("     Real value = %b", HIGH_NIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HIGH_NIBBLE_exp[1] = HIGH_NIBBLE_expected_prev[1];
	end
	if (
		( HIGH_NIBBLE_expected_prev[2] !== 1'bx ) && ( HIGH_NIBBLE_prev[2] !== HIGH_NIBBLE_expected_prev[2] )
		&& ((HIGH_NIBBLE_expected_prev[2] !== last_HIGH_NIBBLE_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HIGH_NIBBLE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HIGH_NIBBLE_expected_prev);
		$display ("     Real value = %b", HIGH_NIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HIGH_NIBBLE_exp[2] = HIGH_NIBBLE_expected_prev[2];
	end
	if (
		( HIGH_NIBBLE_expected_prev[3] !== 1'bx ) && ( HIGH_NIBBLE_prev[3] !== HIGH_NIBBLE_expected_prev[3] )
		&& ((HIGH_NIBBLE_expected_prev[3] !== last_HIGH_NIBBLE_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HIGH_NIBBLE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HIGH_NIBBLE_expected_prev);
		$display ("     Real value = %b", HIGH_NIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HIGH_NIBBLE_exp[3] = HIGH_NIBBLE_expected_prev[3];
	end
	if (
		( LEFT_expected_prev[0] !== 1'bx ) && ( LEFT_prev[0] !== LEFT_expected_prev[0] )
		&& ((LEFT_expected_prev[0] !== last_LEFT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[0] = LEFT_expected_prev[0];
	end
	if (
		( LEFT_expected_prev[1] !== 1'bx ) && ( LEFT_prev[1] !== LEFT_expected_prev[1] )
		&& ((LEFT_expected_prev[1] !== last_LEFT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[1] = LEFT_expected_prev[1];
	end
	if (
		( LEFT_expected_prev[2] !== 1'bx ) && ( LEFT_prev[2] !== LEFT_expected_prev[2] )
		&& ((LEFT_expected_prev[2] !== last_LEFT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[2] = LEFT_expected_prev[2];
	end
	if (
		( LEFT_expected_prev[3] !== 1'bx ) && ( LEFT_prev[3] !== LEFT_expected_prev[3] )
		&& ((LEFT_expected_prev[3] !== last_LEFT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[3] = LEFT_expected_prev[3];
	end
	if (
		( LEFT_expected_prev[4] !== 1'bx ) && ( LEFT_prev[4] !== LEFT_expected_prev[4] )
		&& ((LEFT_expected_prev[4] !== last_LEFT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[4] = LEFT_expected_prev[4];
	end
	if (
		( LEFT_expected_prev[5] !== 1'bx ) && ( LEFT_prev[5] !== LEFT_expected_prev[5] )
		&& ((LEFT_expected_prev[5] !== last_LEFT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[5] = LEFT_expected_prev[5];
	end
	if (
		( LEFT_expected_prev[6] !== 1'bx ) && ( LEFT_prev[6] !== LEFT_expected_prev[6] )
		&& ((LEFT_expected_prev[6] !== last_LEFT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[6] = LEFT_expected_prev[6];
	end
	if (
		( LEFT_expected_prev[7] !== 1'bx ) && ( LEFT_prev[7] !== LEFT_expected_prev[7] )
		&& ((LEFT_expected_prev[7] !== last_LEFT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEFT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEFT_expected_prev);
		$display ("     Real value = %b", LEFT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEFT_exp[7] = LEFT_expected_prev[7];
	end
	if (
		( LOW_BIBBLE_expected_prev[0] !== 1'bx ) && ( LOW_BIBBLE_prev[0] !== LOW_BIBBLE_expected_prev[0] )
		&& ((LOW_BIBBLE_expected_prev[0] !== last_LOW_BIBBLE_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_BIBBLE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_BIBBLE_expected_prev);
		$display ("     Real value = %b", LOW_BIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOW_BIBBLE_exp[0] = LOW_BIBBLE_expected_prev[0];
	end
	if (
		( LOW_BIBBLE_expected_prev[1] !== 1'bx ) && ( LOW_BIBBLE_prev[1] !== LOW_BIBBLE_expected_prev[1] )
		&& ((LOW_BIBBLE_expected_prev[1] !== last_LOW_BIBBLE_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_BIBBLE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_BIBBLE_expected_prev);
		$display ("     Real value = %b", LOW_BIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOW_BIBBLE_exp[1] = LOW_BIBBLE_expected_prev[1];
	end
	if (
		( LOW_BIBBLE_expected_prev[2] !== 1'bx ) && ( LOW_BIBBLE_prev[2] !== LOW_BIBBLE_expected_prev[2] )
		&& ((LOW_BIBBLE_expected_prev[2] !== last_LOW_BIBBLE_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_BIBBLE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_BIBBLE_expected_prev);
		$display ("     Real value = %b", LOW_BIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOW_BIBBLE_exp[2] = LOW_BIBBLE_expected_prev[2];
	end
	if (
		( LOW_BIBBLE_expected_prev[3] !== 1'bx ) && ( LOW_BIBBLE_prev[3] !== LOW_BIBBLE_expected_prev[3] )
		&& ((LOW_BIBBLE_expected_prev[3] !== last_LOW_BIBBLE_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_BIBBLE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_BIBBLE_expected_prev);
		$display ("     Real value = %b", LOW_BIBBLE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOW_BIBBLE_exp[3] = LOW_BIBBLE_expected_prev[3];
	end
	if (
		( RIGHT_expected_prev[0] !== 1'bx ) && ( RIGHT_prev[0] !== RIGHT_expected_prev[0] )
		&& ((RIGHT_expected_prev[0] !== last_RIGHT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[0] = RIGHT_expected_prev[0];
	end
	if (
		( RIGHT_expected_prev[1] !== 1'bx ) && ( RIGHT_prev[1] !== RIGHT_expected_prev[1] )
		&& ((RIGHT_expected_prev[1] !== last_RIGHT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[1] = RIGHT_expected_prev[1];
	end
	if (
		( RIGHT_expected_prev[2] !== 1'bx ) && ( RIGHT_prev[2] !== RIGHT_expected_prev[2] )
		&& ((RIGHT_expected_prev[2] !== last_RIGHT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[2] = RIGHT_expected_prev[2];
	end
	if (
		( RIGHT_expected_prev[3] !== 1'bx ) && ( RIGHT_prev[3] !== RIGHT_expected_prev[3] )
		&& ((RIGHT_expected_prev[3] !== last_RIGHT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[3] = RIGHT_expected_prev[3];
	end
	if (
		( RIGHT_expected_prev[4] !== 1'bx ) && ( RIGHT_prev[4] !== RIGHT_expected_prev[4] )
		&& ((RIGHT_expected_prev[4] !== last_RIGHT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[4] = RIGHT_expected_prev[4];
	end
	if (
		( RIGHT_expected_prev[5] !== 1'bx ) && ( RIGHT_prev[5] !== RIGHT_expected_prev[5] )
		&& ((RIGHT_expected_prev[5] !== last_RIGHT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[5] = RIGHT_expected_prev[5];
	end
	if (
		( RIGHT_expected_prev[6] !== 1'bx ) && ( RIGHT_prev[6] !== RIGHT_expected_prev[6] )
		&& ((RIGHT_expected_prev[6] !== last_RIGHT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[6] = RIGHT_expected_prev[6];
	end
	if (
		( RIGHT_expected_prev[7] !== 1'bx ) && ( RIGHT_prev[7] !== RIGHT_expected_prev[7] )
		&& ((RIGHT_expected_prev[7] !== last_RIGHT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIGHT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIGHT_expected_prev);
		$display ("     Real value = %b", RIGHT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RIGHT_exp[7] = RIGHT_expected_prev[7];
	end
	if (
		( SWAP_expected_prev[0] !== 1'bx ) && ( SWAP_prev[0] !== SWAP_expected_prev[0] )
		&& ((SWAP_expected_prev[0] !== last_SWAP_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[0] = SWAP_expected_prev[0];
	end
	if (
		( SWAP_expected_prev[1] !== 1'bx ) && ( SWAP_prev[1] !== SWAP_expected_prev[1] )
		&& ((SWAP_expected_prev[1] !== last_SWAP_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[1] = SWAP_expected_prev[1];
	end
	if (
		( SWAP_expected_prev[2] !== 1'bx ) && ( SWAP_prev[2] !== SWAP_expected_prev[2] )
		&& ((SWAP_expected_prev[2] !== last_SWAP_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[2] = SWAP_expected_prev[2];
	end
	if (
		( SWAP_expected_prev[3] !== 1'bx ) && ( SWAP_prev[3] !== SWAP_expected_prev[3] )
		&& ((SWAP_expected_prev[3] !== last_SWAP_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[3] = SWAP_expected_prev[3];
	end
	if (
		( SWAP_expected_prev[4] !== 1'bx ) && ( SWAP_prev[4] !== SWAP_expected_prev[4] )
		&& ((SWAP_expected_prev[4] !== last_SWAP_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[4] = SWAP_expected_prev[4];
	end
	if (
		( SWAP_expected_prev[5] !== 1'bx ) && ( SWAP_prev[5] !== SWAP_expected_prev[5] )
		&& ((SWAP_expected_prev[5] !== last_SWAP_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[5] = SWAP_expected_prev[5];
	end
	if (
		( SWAP_expected_prev[6] !== 1'bx ) && ( SWAP_prev[6] !== SWAP_expected_prev[6] )
		&& ((SWAP_expected_prev[6] !== last_SWAP_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[6] = SWAP_expected_prev[6];
	end
	if (
		( SWAP_expected_prev[7] !== 1'bx ) && ( SWAP_prev[7] !== SWAP_expected_prev[7] )
		&& ((SWAP_expected_prev[7] !== last_SWAP_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_expected_prev);
		$display ("     Real value = %b", SWAP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SWAP_exp[7] = SWAP_expected_prev[7];
	end
	if (
		( WORD_expected_prev[0] !== 1'bx ) && ( WORD_prev[0] !== WORD_expected_prev[0] )
		&& ((WORD_expected_prev[0] !== last_WORD_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[0] = WORD_expected_prev[0];
	end
	if (
		( WORD_expected_prev[1] !== 1'bx ) && ( WORD_prev[1] !== WORD_expected_prev[1] )
		&& ((WORD_expected_prev[1] !== last_WORD_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[1] = WORD_expected_prev[1];
	end
	if (
		( WORD_expected_prev[2] !== 1'bx ) && ( WORD_prev[2] !== WORD_expected_prev[2] )
		&& ((WORD_expected_prev[2] !== last_WORD_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[2] = WORD_expected_prev[2];
	end
	if (
		( WORD_expected_prev[3] !== 1'bx ) && ( WORD_prev[3] !== WORD_expected_prev[3] )
		&& ((WORD_expected_prev[3] !== last_WORD_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[3] = WORD_expected_prev[3];
	end
	if (
		( WORD_expected_prev[4] !== 1'bx ) && ( WORD_prev[4] !== WORD_expected_prev[4] )
		&& ((WORD_expected_prev[4] !== last_WORD_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[4] = WORD_expected_prev[4];
	end
	if (
		( WORD_expected_prev[5] !== 1'bx ) && ( WORD_prev[5] !== WORD_expected_prev[5] )
		&& ((WORD_expected_prev[5] !== last_WORD_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[5] = WORD_expected_prev[5];
	end
	if (
		( WORD_expected_prev[6] !== 1'bx ) && ( WORD_prev[6] !== WORD_expected_prev[6] )
		&& ((WORD_expected_prev[6] !== last_WORD_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[6] = WORD_expected_prev[6];
	end
	if (
		( WORD_expected_prev[7] !== 1'bx ) && ( WORD_prev[7] !== WORD_expected_prev[7] )
		&& ((WORD_expected_prev[7] !== last_WORD_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[7] = WORD_expected_prev[7];
	end
	if (
		( WORD_expected_prev[8] !== 1'bx ) && ( WORD_prev[8] !== WORD_expected_prev[8] )
		&& ((WORD_expected_prev[8] !== last_WORD_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[8] = WORD_expected_prev[8];
	end
	if (
		( WORD_expected_prev[9] !== 1'bx ) && ( WORD_prev[9] !== WORD_expected_prev[9] )
		&& ((WORD_expected_prev[9] !== last_WORD_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[9] = WORD_expected_prev[9];
	end
	if (
		( WORD_expected_prev[10] !== 1'bx ) && ( WORD_prev[10] !== WORD_expected_prev[10] )
		&& ((WORD_expected_prev[10] !== last_WORD_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[10] = WORD_expected_prev[10];
	end
	if (
		( WORD_expected_prev[11] !== 1'bx ) && ( WORD_prev[11] !== WORD_expected_prev[11] )
		&& ((WORD_expected_prev[11] !== last_WORD_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[11] = WORD_expected_prev[11];
	end
	if (
		( WORD_expected_prev[12] !== 1'bx ) && ( WORD_prev[12] !== WORD_expected_prev[12] )
		&& ((WORD_expected_prev[12] !== last_WORD_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[12] = WORD_expected_prev[12];
	end
	if (
		( WORD_expected_prev[13] !== 1'bx ) && ( WORD_prev[13] !== WORD_expected_prev[13] )
		&& ((WORD_expected_prev[13] !== last_WORD_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[13] = WORD_expected_prev[13];
	end
	if (
		( WORD_expected_prev[14] !== 1'bx ) && ( WORD_prev[14] !== WORD_expected_prev[14] )
		&& ((WORD_expected_prev[14] !== last_WORD_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[14] = WORD_expected_prev[14];
	end
	if (
		( WORD_expected_prev[15] !== 1'bx ) && ( WORD_prev[15] !== WORD_expected_prev[15] )
		&& ((WORD_expected_prev[15] !== last_WORD_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WORD[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WORD_expected_prev);
		$display ("     Real value = %b", WORD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_WORD_exp[15] = WORD_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONCATENATION_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] HIGH_BYTE;
reg [7:0] LOW_BYTE;
// wires                                               
wire [3:0] HIGH_NIBBLE;
wire [7:0] LEFT;
wire [3:0] LOW_BIBBLE;
wire [7:0] RIGHT;
wire [7:0] SWAP;
wire [15:0] WORD;

wire sampler;                             

// assign statements (if any)                          
CONCATENATION i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.HIGH_BYTE(HIGH_BYTE),
	.HIGH_NIBBLE(HIGH_NIBBLE),
	.LEFT(LEFT),
	.LOW_BIBBLE(LOW_BIBBLE),
	.LOW_BYTE(LOW_BYTE),
	.RIGHT(RIGHT),
	.SWAP(SWAP),
	.WORD(WORD)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
	A[7] = #40000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #50000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #30000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #60000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #40000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #50000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #50000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #40000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #30000 1'b1;
	A[7] = #10000 1'b0;
	A[7] = #10000 1'b1;
	A[7] = #20000 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #30000 1'b0;
	A[7] = #20000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #40000 1'b1;
	A[6] = #30000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #80000 1'b1;
	A[6] = #50000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #70000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #60000 1'b1;
	A[6] = #60000 1'b0;
	A[6] = #30000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #40000 1'b0;
	A[6] = #60000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #10000 1'b1;
	A[6] = #10000 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #20000 1'b0;
	A[6] = #10000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #60000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #50000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #60000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #20000 1'b0;
	A[5] = #40000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #30000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #10000 1'b0;
	A[5] = #30000 1'b1;
	A[5] = #40000 1'b0;
	A[5] = #10000 1'b1;
	A[5] = #40000 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #10000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
	A[4] = #80000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #50000 1'b1;
	A[4] = #50000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #30000 1'b1;
	A[4] = #70000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #20000 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
	A[4] = #50000 1'b1;
	A[4] = #40000 1'b0;
	A[4] = #10000 1'b1;
	A[4] = #10000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #60000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #70000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #60000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #40000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #50000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #40000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #50000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #40000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #50000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #70000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #60000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #50000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #60000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #50000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #40000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #40000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #90000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #50000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #30000 1'b1;
end 
// HIGH_BYTE[ 7 ]
initial
begin
	HIGH_BYTE[7] = 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #60000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #30000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #30000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #40000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #50000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #20000 1'b0;
	HIGH_BYTE[7] = #40000 1'b1;
	HIGH_BYTE[7] = #20000 1'b0;
	HIGH_BYTE[7] = #30000 1'b1;
	HIGH_BYTE[7] = #20000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #30000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #30000 1'b1;
	HIGH_BYTE[7] = #20000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #40000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #20000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #20000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #50000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #50000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
	HIGH_BYTE[7] = #10000 1'b0;
	HIGH_BYTE[7] = #10000 1'b1;
end 
// HIGH_BYTE[ 6 ]
initial
begin
	HIGH_BYTE[6] = 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #30000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #40000 1'b1;
	HIGH_BYTE[6] = #30000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #20000 1'b0;
	HIGH_BYTE[6] = #80000 1'b1;
	HIGH_BYTE[6] = #30000 1'b0;
	HIGH_BYTE[6] = #40000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #20000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #20000 1'b0;
	HIGH_BYTE[6] = #30000 1'b1;
	HIGH_BYTE[6] = #30000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #20000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #40000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #30000 1'b0;
	HIGH_BYTE[6] = #20000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #20000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #40000 1'b1;
	HIGH_BYTE[6] = #20000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #40000 1'b0;
	HIGH_BYTE[6] = #20000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
	HIGH_BYTE[6] = #10000 1'b0;
	HIGH_BYTE[6] = #10000 1'b1;
end 
// HIGH_BYTE[ 5 ]
initial
begin
	HIGH_BYTE[5] = 1'b1;
	HIGH_BYTE[5] = #30000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #30000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #30000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #40000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #40000 1'b1;
	HIGH_BYTE[5] = #30000 1'b0;
	HIGH_BYTE[5] = #40000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #50000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #30000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #40000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #30000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #20000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #20000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #40000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #30000 1'b0;
	HIGH_BYTE[5] = #20000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #20000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #30000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #20000 1'b0;
	HIGH_BYTE[5] = #20000 1'b1;
	HIGH_BYTE[5] = #30000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
	HIGH_BYTE[5] = #10000 1'b1;
	HIGH_BYTE[5] = #10000 1'b0;
end 
// HIGH_BYTE[ 4 ]
initial
begin
	HIGH_BYTE[4] = 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #60000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #30000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #40000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #40000 1'b1;
	HIGH_BYTE[4] = #30000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #30000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #70000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #10000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #30000 1'b0;
	HIGH_BYTE[4] = #50000 1'b1;
	HIGH_BYTE[4] = #20000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #30000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #20000 1'b1;
	HIGH_BYTE[4] = #10000 1'b0;
	HIGH_BYTE[4] = #30000 1'b1;
end 
// HIGH_BYTE[ 3 ]
initial
begin
	HIGH_BYTE[3] = 1'b0;
	HIGH_BYTE[3] = #30000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #60000 1'b1;
	HIGH_BYTE[3] = #40000 1'b0;
	HIGH_BYTE[3] = #30000 1'b1;
	HIGH_BYTE[3] = #20000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #20000 1'b0;
	HIGH_BYTE[3] = #40000 1'b1;
	HIGH_BYTE[3] = #30000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #30000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #40000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #20000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #40000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #20000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #30000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #30000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #20000 1'b1;
	HIGH_BYTE[3] = #10000 1'b0;
	HIGH_BYTE[3] = #10000 1'b1;
	HIGH_BYTE[3] = #20000 1'b0;
	HIGH_BYTE[3] = #50000 1'b1;
	HIGH_BYTE[3] = #30000 1'b0;
	HIGH_BYTE[3] = #40000 1'b1;
end 
// HIGH_BYTE[ 2 ]
initial
begin
	HIGH_BYTE[2] = 1'b1;
	HIGH_BYTE[2] = #20000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #20000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #30000 1'b0;
	HIGH_BYTE[2] = #30000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #20000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #30000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #30000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #50000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #20000 1'b0;
	HIGH_BYTE[2] = #50000 1'b1;
	HIGH_BYTE[2] = #30000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #40000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #100000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #20000 1'b0;
	HIGH_BYTE[2] = #40000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #30000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #30000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #30000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #10000 1'b1;
	HIGH_BYTE[2] = #10000 1'b0;
	HIGH_BYTE[2] = #20000 1'b1;
end 
// HIGH_BYTE[ 1 ]
initial
begin
	HIGH_BYTE[1] = 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #20000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #50000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #30000 1'b0;
	HIGH_BYTE[1] = #50000 1'b1;
	HIGH_BYTE[1] = #40000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #30000 1'b1;
	HIGH_BYTE[1] = #40000 1'b0;
	HIGH_BYTE[1] = #80000 1'b1;
	HIGH_BYTE[1] = #30000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #20000 1'b0;
	HIGH_BYTE[1] = #20000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #30000 1'b1;
	HIGH_BYTE[1] = #10000 1'b0;
	HIGH_BYTE[1] = #30000 1'b1;
	HIGH_BYTE[1] = #50000 1'b0;
	HIGH_BYTE[1] = #10000 1'b1;
	HIGH_BYTE[1] = #30000 1'b0;
end 
// HIGH_BYTE[ 0 ]
initial
begin
	HIGH_BYTE[0] = 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #50000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #60000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #40000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #40000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #40000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #10000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
	HIGH_BYTE[0] = #20000 1'b0;
	HIGH_BYTE[0] = #30000 1'b1;
	HIGH_BYTE[0] = #10000 1'b0;
	HIGH_BYTE[0] = #20000 1'b1;
end 
// LOW_BYTE[ 7 ]
initial
begin
	LOW_BYTE[7] = 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #70000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #30000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #30000 1'b0;
	LOW_BYTE[7] = #40000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #40000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #40000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #30000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #30000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #30000 1'b1;
	LOW_BYTE[7] = #40000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #10000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
	LOW_BYTE[7] = #40000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #20000 1'b0;
	LOW_BYTE[7] = #20000 1'b1;
	LOW_BYTE[7] = #10000 1'b0;
end 
// LOW_BYTE[ 6 ]
initial
begin
	LOW_BYTE[6] = 1'b0;
	LOW_BYTE[6] = #50000 1'b1;
	LOW_BYTE[6] = #50000 1'b0;
	LOW_BYTE[6] = #50000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #30000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #30000 1'b1;
	LOW_BYTE[6] = #20000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #60000 1'b1;
	LOW_BYTE[6] = #20000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #30000 1'b1;
	LOW_BYTE[6] = #30000 1'b0;
	LOW_BYTE[6] = #80000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #40000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #40000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #70000 1'b1;
	LOW_BYTE[6] = #20000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #30000 1'b0;
	LOW_BYTE[6] = #20000 1'b1;
	LOW_BYTE[6] = #90000 1'b0;
	LOW_BYTE[6] = #20000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
	LOW_BYTE[6] = #10000 1'b1;
	LOW_BYTE[6] = #10000 1'b0;
end 
// LOW_BYTE[ 5 ]
initial
begin
	LOW_BYTE[5] = 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #20000 1'b0;
	LOW_BYTE[5] = #50000 1'b1;
	LOW_BYTE[5] = #30000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #20000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #20000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #60000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #30000 1'b1;
	LOW_BYTE[5] = #20000 1'b0;
	LOW_BYTE[5] = #20000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #40000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #20000 1'b0;
	LOW_BYTE[5] = #20000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #20000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #20000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #10000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #40000 1'b0;
	LOW_BYTE[5] = #40000 1'b1;
	LOW_BYTE[5] = #10000 1'b0;
	LOW_BYTE[5] = #20000 1'b1;
	LOW_BYTE[5] = #30000 1'b0;
end 
// LOW_BYTE[ 4 ]
initial
begin
	LOW_BYTE[4] = 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #40000 1'b0;
	LOW_BYTE[4] = #50000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #30000 1'b0;
	LOW_BYTE[4] = #30000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #30000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #50000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #40000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #30000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #30000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #20000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #30000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #10000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #20000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
	LOW_BYTE[4] = #30000 1'b1;
	LOW_BYTE[4] = #10000 1'b0;
end 
// LOW_BYTE[ 3 ]
initial
begin
	LOW_BYTE[3] = 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #30000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #20000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
	LOW_BYTE[3] = #20000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #20000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #50000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #20000 1'b0;
	LOW_BYTE[3] = #60000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #30000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
	LOW_BYTE[3] = #30000 1'b0;
	LOW_BYTE[3] = #10000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #30000 1'b1;
	LOW_BYTE[3] = #10000 1'b0;
	LOW_BYTE[3] = #20000 1'b1;
end 
// LOW_BYTE[ 2 ]
initial
begin
	LOW_BYTE[2] = 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #80000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #30000 1'b1;
	LOW_BYTE[2] = #50000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #30000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #100000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #30000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #40000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #40000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #10000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #10000 1'b0;
	LOW_BYTE[2] = #90000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
	LOW_BYTE[2] = #20000 1'b1;
	LOW_BYTE[2] = #20000 1'b0;
end 
// LOW_BYTE[ 1 ]
initial
begin
	LOW_BYTE[1] = 1'b1;
	LOW_BYTE[1] = #40000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #40000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #40000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #20000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #30000 1'b1;
	LOW_BYTE[1] = #40000 1'b0;
	LOW_BYTE[1] = #20000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #40000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #60000 1'b1;
	LOW_BYTE[1] = #60000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #40000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #50000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #20000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #50000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #20000 1'b0;
	LOW_BYTE[1] = #10000 1'b1;
	LOW_BYTE[1] = #10000 1'b0;
	LOW_BYTE[1] = #20000 1'b1;
end 
// LOW_BYTE[ 0 ]
initial
begin
	LOW_BYTE[0] = 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #30000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #30000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #30000 1'b0;
	LOW_BYTE[0] = #30000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #40000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #20000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #60000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #50000 1'b0;
	LOW_BYTE[0] = #30000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #30000 1'b1;
	LOW_BYTE[0] = #60000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #20000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #20000 1'b0;
	LOW_BYTE[0] = #10000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #40000 1'b1;
	LOW_BYTE[0] = #10000 1'b0;
	LOW_BYTE[0] = #20000 1'b1;
	LOW_BYTE[0] = #20000 1'b0;
end 

CONCATENATION_vlg_sample_tst tb_sample (
	.A(A),
	.HIGH_BYTE(HIGH_BYTE),
	.LOW_BYTE(LOW_BYTE),
	.sampler_tx(sampler)
);

CONCATENATION_vlg_check_tst tb_out(
	.HIGH_NIBBLE(HIGH_NIBBLE),
	.LEFT(LEFT),
	.LOW_BIBBLE(LOW_BIBBLE),
	.RIGHT(RIGHT),
	.SWAP(SWAP),
	.WORD(WORD),
	.sampler_rx(sampler)
);
endmodule

