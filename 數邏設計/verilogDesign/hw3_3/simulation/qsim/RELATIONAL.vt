// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2025 14:05:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RELATIONAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RELATIONAL_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RELATIONAL_vlg_check_tst (
	CEQV,
	CNOT_EQV,
	EQV,
	NOT_EQV,
	sampler_rx
);
input  CEQV;
input  CNOT_EQV;
input  EQV;
input  NOT_EQV;
input sampler_rx;

reg  CEQV_expected;
reg  CNOT_EQV_expected;
reg  EQV_expected;
reg  NOT_EQV_expected;

reg  CEQV_prev;
reg  CNOT_EQV_prev;
reg  EQV_prev;
reg  NOT_EQV_prev;

reg  CEQV_expected_prev;
reg  CNOT_EQV_expected_prev;
reg  EQV_expected_prev;
reg  NOT_EQV_expected_prev;

reg  last_CEQV_exp;
reg  last_CNOT_EQV_exp;
reg  last_EQV_exp;
reg  last_NOT_EQV_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CEQV_prev = CEQV;
	CNOT_EQV_prev = CNOT_EQV;
	EQV_prev = EQV;
	NOT_EQV_prev = NOT_EQV;
end

// update expected /o prevs

always @(trigger)
begin
	CEQV_expected_prev = CEQV_expected;
	CNOT_EQV_expected_prev = CNOT_EQV_expected;
	EQV_expected_prev = EQV_expected;
	NOT_EQV_expected_prev = NOT_EQV_expected;
end



// expected CEQV
initial
begin
	CEQV_expected = 1'bX;
end 

// expected CNOT_EQV
initial
begin
	CNOT_EQV_expected = 1'bX;
end 

// expected EQV
initial
begin
	EQV_expected = 1'bX;
end 

// expected NOT_EQV
initial
begin
	NOT_EQV_expected = 1'bX;
end 
// generate trigger
always @(CEQV_expected or CEQV or CNOT_EQV_expected or CNOT_EQV or EQV_expected or EQV or NOT_EQV_expected or NOT_EQV)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CEQV = %b | expected CNOT_EQV = %b | expected EQV = %b | expected NOT_EQV = %b | ",CEQV_expected_prev,CNOT_EQV_expected_prev,EQV_expected_prev,NOT_EQV_expected_prev);
	$display("| real CEQV = %b | real CNOT_EQV = %b | real EQV = %b | real NOT_EQV = %b | ",CEQV_prev,CNOT_EQV_prev,EQV_prev,NOT_EQV_prev);
`endif
	if (
		( CEQV_expected_prev !== 1'bx ) && ( CEQV_prev !== CEQV_expected_prev )
		&& ((CEQV_expected_prev !== last_CEQV_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CEQV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CEQV_expected_prev);
		$display ("     Real value = %b", CEQV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CEQV_exp = CEQV_expected_prev;
	end
	if (
		( CNOT_EQV_expected_prev !== 1'bx ) && ( CNOT_EQV_prev !== CNOT_EQV_expected_prev )
		&& ((CNOT_EQV_expected_prev !== last_CNOT_EQV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CNOT_EQV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CNOT_EQV_expected_prev);
		$display ("     Real value = %b", CNOT_EQV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CNOT_EQV_exp = CNOT_EQV_expected_prev;
	end
	if (
		( EQV_expected_prev !== 1'bx ) && ( EQV_prev !== EQV_expected_prev )
		&& ((EQV_expected_prev !== last_EQV_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EQV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EQV_expected_prev);
		$display ("     Real value = %b", EQV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EQV_exp = EQV_expected_prev;
	end
	if (
		( NOT_EQV_expected_prev !== 1'bx ) && ( NOT_EQV_prev !== NOT_EQV_expected_prev )
		&& ((NOT_EQV_expected_prev !== last_NOT_EQV_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT_EQV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_EQV_expected_prev);
		$display ("     Real value = %b", NOT_EQV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NOT_EQV_exp = NOT_EQV_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RELATIONAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
// wires                                               
wire CEQV;
wire CNOT_EQV;
wire EQV;
wire NOT_EQV;

wire sampler;                             

// assign statements (if any)                          
RELATIONAL i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CEQV(CEQV),
	.CNOT_EQV(CNOT_EQV),
	.EQV(EQV),
	.NOT_EQV(NOT_EQV)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #50000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #40000 1'b1;
	A[2] = #70000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #40000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #30000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #40000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #80000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #70000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #40000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #50000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #30000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #50000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #30000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #130000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #10000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #50000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #100000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #90000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #40000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #30000 1'b0;
	B[3] = #40000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #50000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #50000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #40000 1'b1;
	B[2] = #30000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #40000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #30000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #40000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #30000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #30000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #140000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #80000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #30000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #50000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #80000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
end 

RELATIONAL_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

RELATIONAL_vlg_check_tst tb_out(
	.CEQV(CEQV),
	.CNOT_EQV(CNOT_EQV),
	.EQV(EQV),
	.NOT_EQV(NOT_EQV),
	.sampler_rx(sampler)
);
endmodule

