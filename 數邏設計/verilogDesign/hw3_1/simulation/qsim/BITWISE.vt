// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/10/2025 13:11:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BITWISE
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BITWISE_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input  A;
input  B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BITWISE_vlg_check_tst (
	AND_OP,
	NAND_OP,
	NOR_OP,
	NOT_OP,
	OR_OP,
	XNOR_OP,
	XOR_OP,
	sampler_rx
);
input  AND_OP;
input  NAND_OP;
input  NOR_OP;
input  NOT_OP;
input  OR_OP;
input  XNOR_OP;
input  XOR_OP;
input sampler_rx;

reg  AND_OP_expected;
reg  NAND_OP_expected;
reg  NOR_OP_expected;
reg  NOT_OP_expected;
reg  OR_OP_expected;
reg  XNOR_OP_expected;
reg  XOR_OP_expected;

reg  AND_OP_prev;
reg  NAND_OP_prev;
reg  NOR_OP_prev;
reg  NOT_OP_prev;
reg  OR_OP_prev;
reg  XNOR_OP_prev;
reg  XOR_OP_prev;

reg  AND_OP_expected_prev;
reg  NAND_OP_expected_prev;
reg  NOR_OP_expected_prev;
reg  NOT_OP_expected_prev;
reg  OR_OP_expected_prev;
reg  XNOR_OP_expected_prev;
reg  XOR_OP_expected_prev;

reg  last_AND_OP_exp;
reg  last_NAND_OP_exp;
reg  last_NOR_OP_exp;
reg  last_NOT_OP_exp;
reg  last_OR_OP_exp;
reg  last_XNOR_OP_exp;
reg  last_XOR_OP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	AND_OP_prev = AND_OP;
	NAND_OP_prev = NAND_OP;
	NOR_OP_prev = NOR_OP;
	NOT_OP_prev = NOT_OP;
	OR_OP_prev = OR_OP;
	XNOR_OP_prev = XNOR_OP;
	XOR_OP_prev = XOR_OP;
end

// update expected /o prevs

always @(trigger)
begin
	AND_OP_expected_prev = AND_OP_expected;
	NAND_OP_expected_prev = NAND_OP_expected;
	NOR_OP_expected_prev = NOR_OP_expected;
	NOT_OP_expected_prev = NOT_OP_expected;
	OR_OP_expected_prev = OR_OP_expected;
	XNOR_OP_expected_prev = XNOR_OP_expected;
	XOR_OP_expected_prev = XOR_OP_expected;
end



// expected AND_OP
initial
begin
	AND_OP_expected = 1'bX;
end 

// expected NAND_OP
initial
begin
	NAND_OP_expected = 1'bX;
end 

// expected NOR_OP
initial
begin
	NOR_OP_expected = 1'bX;
end 

// expected NOT_OP
initial
begin
	NOT_OP_expected = 1'bX;
end 

// expected OR_OP
initial
begin
	OR_OP_expected = 1'bX;
end 

// expected XNOR_OP
initial
begin
	XNOR_OP_expected = 1'bX;
end 

// expected XOR_OP
initial
begin
	XOR_OP_expected = 1'bX;
end 
// generate trigger
always @(AND_OP_expected or AND_OP or NAND_OP_expected or NAND_OP or NOR_OP_expected or NOR_OP or NOT_OP_expected or NOT_OP or OR_OP_expected or OR_OP or XNOR_OP_expected or XNOR_OP or XOR_OP_expected or XOR_OP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AND_OP = %b | expected NAND_OP = %b | expected NOR_OP = %b | expected NOT_OP = %b | expected OR_OP = %b | expected XNOR_OP = %b | expected XOR_OP = %b | ",AND_OP_expected_prev,NAND_OP_expected_prev,NOR_OP_expected_prev,NOT_OP_expected_prev,OR_OP_expected_prev,XNOR_OP_expected_prev,XOR_OP_expected_prev);
	$display("| real AND_OP = %b | real NAND_OP = %b | real NOR_OP = %b | real NOT_OP = %b | real OR_OP = %b | real XNOR_OP = %b | real XOR_OP = %b | ",AND_OP_prev,NAND_OP_prev,NOR_OP_prev,NOT_OP_prev,OR_OP_prev,XNOR_OP_prev,XOR_OP_prev);
`endif
	if (
		( AND_OP_expected_prev !== 1'bx ) && ( AND_OP_prev !== AND_OP_expected_prev )
		&& ((AND_OP_expected_prev !== last_AND_OP_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AND_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AND_OP_expected_prev);
		$display ("     Real value = %b", AND_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AND_OP_exp = AND_OP_expected_prev;
	end
	if (
		( NAND_OP_expected_prev !== 1'bx ) && ( NAND_OP_prev !== NAND_OP_expected_prev )
		&& ((NAND_OP_expected_prev !== last_NAND_OP_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NAND_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NAND_OP_expected_prev);
		$display ("     Real value = %b", NAND_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NAND_OP_exp = NAND_OP_expected_prev;
	end
	if (
		( NOR_OP_expected_prev !== 1'bx ) && ( NOR_OP_prev !== NOR_OP_expected_prev )
		&& ((NOR_OP_expected_prev !== last_NOR_OP_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOR_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOR_OP_expected_prev);
		$display ("     Real value = %b", NOR_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NOR_OP_exp = NOR_OP_expected_prev;
	end
	if (
		( NOT_OP_expected_prev !== 1'bx ) && ( NOT_OP_prev !== NOT_OP_expected_prev )
		&& ((NOT_OP_expected_prev !== last_NOT_OP_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NOT_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NOT_OP_expected_prev);
		$display ("     Real value = %b", NOT_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_NOT_OP_exp = NOT_OP_expected_prev;
	end
	if (
		( OR_OP_expected_prev !== 1'bx ) && ( OR_OP_prev !== OR_OP_expected_prev )
		&& ((OR_OP_expected_prev !== last_OR_OP_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OR_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OR_OP_expected_prev);
		$display ("     Real value = %b", OR_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OR_OP_exp = OR_OP_expected_prev;
	end
	if (
		( XNOR_OP_expected_prev !== 1'bx ) && ( XNOR_OP_prev !== XNOR_OP_expected_prev )
		&& ((XNOR_OP_expected_prev !== last_XNOR_OP_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XNOR_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XNOR_OP_expected_prev);
		$display ("     Real value = %b", XNOR_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_XNOR_OP_exp = XNOR_OP_expected_prev;
	end
	if (
		( XOR_OP_expected_prev !== 1'bx ) && ( XOR_OP_prev !== XOR_OP_expected_prev )
		&& ((XOR_OP_expected_prev !== last_XOR_OP_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XOR_OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XOR_OP_expected_prev);
		$display ("     Real value = %b", XOR_OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_XOR_OP_exp = XOR_OP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BITWISE_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
// wires                                               
wire AND_OP;
wire NAND_OP;
wire NOR_OP;
wire NOT_OP;
wire OR_OP;
wire XNOR_OP;
wire XOR_OP;

wire sampler;                             

// assign statements (if any)                          
BITWISE i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AND_OP(AND_OP),
	.B(B),
	.NAND_OP(NAND_OP),
	.NOR_OP(NOR_OP),
	.NOT_OP(NOT_OP),
	.OR_OP(OR_OP),
	.XNOR_OP(XNOR_OP),
	.XOR_OP(XOR_OP)
);

// A
initial
begin
	A = 1'b0;
	A = #10000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #30000 1'b0;
	A = #40000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #20000 1'b0;
	A = #20000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #50000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #20000 1'b1;
	A = #30000 1'b0;
	A = #20000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #20000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #30000 1'b0;
	A = #50000 1'b1;
	A = #10000 1'b0;
	A = #50000 1'b1;
	A = #50000 1'b0;
	A = #50000 1'b1;
	A = #40000 1'b0;
	A = #20000 1'b1;
	A = #70000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #20000 1'b1;
	A = #20000 1'b0;
	A = #10000 1'b1;
	A = #10000 1'b0;
	A = #10000 1'b1;
	A = #30000 1'b0;
	A = #20000 1'b1;
	A = #10000 1'b0;
	A = #20000 1'b1;
end 

// B
initial
begin
	B = 1'b1;
	B = #10000 1'b0;
	B = #30000 1'b1;
	B = #10000 1'b0;
	B = #20000 1'b1;
	B = #70000 1'b0;
	B = #10000 1'b1;
	B = #20000 1'b0;
	B = #10000 1'b1;
	B = #30000 1'b0;
	B = #10000 1'b1;
	B = #20000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #40000 1'b1;
	B = #10000 1'b0;
	B = #20000 1'b1;
	B = #40000 1'b0;
	B = #10000 1'b1;
	B = #80000 1'b0;
	B = #50000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #30000 1'b0;
	B = #10000 1'b1;
	B = #20000 1'b0;
	B = #30000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #20000 1'b0;
	B = #50000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #30000 1'b0;
	B = #10000 1'b1;
	B = #20000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
	B = #40000 1'b1;
	B = #20000 1'b0;
	B = #20000 1'b1;
	B = #20000 1'b0;
	B = #10000 1'b1;
	B = #10000 1'b0;
end 

BITWISE_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

BITWISE_vlg_check_tst tb_out(
	.AND_OP(AND_OP),
	.NAND_OP(NAND_OP),
	.NOR_OP(NOR_OP),
	.NOT_OP(NOT_OP),
	.OR_OP(OR_OP),
	.XNOR_OP(XNOR_OP),
	.XOR_OP(XOR_OP),
	.sampler_rx(sampler)
);
endmodule

