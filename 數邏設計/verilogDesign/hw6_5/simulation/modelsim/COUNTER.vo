// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "03/31/2025 14:38:23"

// 
// Device: Altera EP4CGX15BF14A7 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module COUNTER (
	CLK,
	RESET,
	Q);
input 	CLK;
input 	RESET;
output 	[3:0] Q;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Q[0]~output_o ;
wire \Q[1]~output_o ;
wire \Q[2]~output_o ;
wire \Q[3]~output_o ;
wire \CLK~input_o ;
wire \Q[0]~2_combout ;
wire \RESET~input_o ;
wire \Q[0]~reg0_q ;
wire \Add0~0_combout ;
wire \Q[2]~reg0_q ;
wire \Q~1_combout ;
wire \Q[3]~reg0_q ;
wire \Q~0_combout ;
wire \Q[1]~reg0_q ;


cycloneiv_io_obuf \Q[0]~output (
	.i(\Q[0]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[0]~output .bus_hold = "false";
defparam \Q[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[1]~output (
	.i(\Q[1]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[1]~output .bus_hold = "false";
defparam \Q[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[2]~output (
	.i(\Q[2]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[2]~output .bus_hold = "false";
defparam \Q[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \Q[3]~output (
	.i(\Q[3]~reg0_q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[3]~output .bus_hold = "false";
defparam \Q[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \Q[0]~2 (
// Equation(s):
// \Q[0]~2_combout  = !\Q[0]~reg0_q 

	.dataa(\Q[0]~reg0_q ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\Q[0]~2_combout ),
	.cout());
// synopsys translate_off
defparam \Q[0]~2 .lut_mask = 16'h5555;
defparam \Q[0]~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \RESET~input (
	.i(RESET),
	.ibar(gnd),
	.o(\RESET~input_o ));
// synopsys translate_off
defparam \RESET~input .bus_hold = "false";
defparam \RESET~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \Q[0]~reg0 (
	.clk(\CLK~input_o ),
	.d(\Q[0]~2_combout ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[0]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[0]~reg0 .is_wysiwyg = "true";
defparam \Q[0]~reg0 .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \Add0~0 (
// Equation(s):
// \Add0~0_combout  = \Q[2]~reg0_q  $ (((\Q[0]~reg0_q  & \Q[1]~reg0_q )))

	.dataa(gnd),
	.datab(\Q[2]~reg0_q ),
	.datac(\Q[0]~reg0_q ),
	.datad(\Q[1]~reg0_q ),
	.cin(gnd),
	.combout(\Add0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~0 .lut_mask = 16'h3CCC;
defparam \Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \Q[2]~reg0 (
	.clk(\CLK~input_o ),
	.d(\Add0~0_combout ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[2]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[2]~reg0 .is_wysiwyg = "true";
defparam \Q[2]~reg0 .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \Q~1 (
// Equation(s):
// \Q~1_combout  = (\Q[3]~reg0_q  & ((\Q[1]~reg0_q  $ (\Q[2]~reg0_q )) # (!\Q[0]~reg0_q ))) # (!\Q[3]~reg0_q  & (\Q[1]~reg0_q  & (\Q[2]~reg0_q  & \Q[0]~reg0_q )))

	.dataa(\Q[3]~reg0_q ),
	.datab(\Q[1]~reg0_q ),
	.datac(\Q[2]~reg0_q ),
	.datad(\Q[0]~reg0_q ),
	.cin(gnd),
	.combout(\Q~1_combout ),
	.cout());
// synopsys translate_off
defparam \Q~1 .lut_mask = 16'h68AA;
defparam \Q~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \Q[3]~reg0 (
	.clk(\CLK~input_o ),
	.d(\Q~1_combout ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[3]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[3]~reg0 .is_wysiwyg = "true";
defparam \Q[3]~reg0 .power_up = "low";
// synopsys translate_on

cycloneiv_lcell_comb \Q~0 (
// Equation(s):
// \Q~0_combout  = (\Q[1]~reg0_q  & (((!\Q[0]~reg0_q )))) # (!\Q[1]~reg0_q  & (\Q[0]~reg0_q  & ((\Q[2]~reg0_q ) # (!\Q[3]~reg0_q ))))

	.dataa(\Q[2]~reg0_q ),
	.datab(\Q[3]~reg0_q ),
	.datac(\Q[1]~reg0_q ),
	.datad(\Q[0]~reg0_q ),
	.cin(gnd),
	.combout(\Q~0_combout ),
	.cout());
// synopsys translate_off
defparam \Q~0 .lut_mask = 16'h0BF0;
defparam \Q~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \Q[1]~reg0 (
	.clk(\CLK~input_o ),
	.d(\Q~0_combout ),
	.asdata(vcc),
	.clrn(\RESET~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q[1]~reg0_q ),
	.prn(vcc));
// synopsys translate_off
defparam \Q[1]~reg0 .is_wysiwyg = "true";
defparam \Q[1]~reg0 .power_up = "low";
// synopsys translate_on

assign Q[0] = \Q[0]~output_o ;

assign Q[1] = \Q[1]~output_o ;

assign Q[2] = \Q[2]~output_o ;

assign Q[3] = \Q[3]~output_o ;

endmodule
