// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "03/24/2025 14:36:29"

// 
// Device: Altera EP4CGX15BF14A7 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module MUL3_1 (
	I,
	S,
	F);
input 	[2:0] I;
input 	[1:0] S;
output 	F;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \F~0_combout ;
wire \I[1]~input_o ;
wire \I[0]~input_o ;
wire \F~output_o ;
wire \I[2]~input_o ;
wire \S[1]~input_o ;
wire \F~1_combout ;
wire \S[0]~input_o ;
wire \F~2_combout ;
wire \F$latch~combout ;


cycloneiv_lcell_comb \F~0 (
// Equation(s):
// \F~0_combout  = (!\S[1]~input_o  & ((\S[0]~input_o  & (\I[1]~input_o )) # (!\S[0]~input_o  & ((\I[0]~input_o )))))

	.dataa(\I[1]~input_o ),
	.datab(\I[0]~input_o ),
	.datac(\S[0]~input_o ),
	.datad(\S[1]~input_o ),
	.cin(gnd),
	.combout(\F~0_combout ),
	.cout());
// synopsys translate_off
defparam \F~0 .lut_mask = 16'h00AC;
defparam \F~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \I[1]~input (
	.i(I[1]),
	.ibar(gnd),
	.o(\I[1]~input_o ));
// synopsys translate_off
defparam \I[1]~input .bus_hold = "false";
defparam \I[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \I[0]~input (
	.i(I[0]),
	.ibar(gnd),
	.o(\I[0]~input_o ));
// synopsys translate_off
defparam \I[0]~input .bus_hold = "false";
defparam \I[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_obuf \F~output (
	.i(\F$latch~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\F~output_o ),
	.obar());
// synopsys translate_off
defparam \F~output .bus_hold = "false";
defparam \F~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \I[2]~input (
	.i(I[2]),
	.ibar(gnd),
	.o(\I[2]~input_o ));
// synopsys translate_off
defparam \I[2]~input .bus_hold = "false";
defparam \I[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \S[1]~input (
	.i(S[1]),
	.ibar(gnd),
	.o(\S[1]~input_o ));
// synopsys translate_off
defparam \S[1]~input .bus_hold = "false";
defparam \S[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \F~1 (
// Equation(s):
// \F~1_combout  = (\F~0_combout ) # ((\I[2]~input_o  & \S[1]~input_o ))

	.dataa(\F~0_combout ),
	.datab(\I[2]~input_o ),
	.datac(\S[1]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\F~1_combout ),
	.cout());
// synopsys translate_off
defparam \F~1 .lut_mask = 16'hEAEA;
defparam \F~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \S[0]~input (
	.i(S[0]),
	.ibar(gnd),
	.o(\S[0]~input_o ));
// synopsys translate_off
defparam \S[0]~input .bus_hold = "false";
defparam \S[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \F~2 (
// Equation(s):
// \F~2_combout  = (!\S[0]~input_o ) # (!\S[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\S[1]~input_o ),
	.datad(\S[0]~input_o ),
	.cin(gnd),
	.combout(\F~2_combout ),
	.cout());
// synopsys translate_off
defparam \F~2 .lut_mask = 16'h0FFF;
defparam \F~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_lcell_comb F$latch(
// Equation(s):
// \F$latch~combout  = (\F~2_combout  & (\F~1_combout )) # (!\F~2_combout  & ((\F$latch~combout )))

	.dataa(gnd),
	.datab(\F~1_combout ),
	.datac(\F$latch~combout ),
	.datad(\F~2_combout ),
	.cin(gnd),
	.combout(\F$latch~combout ),
	.cout());
// synopsys translate_off
defparam F$latch.lut_mask = 16'hCCF0;
defparam F$latch.sum_lutc_input = "datac";
// synopsys translate_on

assign F = \F~output_o ;

endmodule
